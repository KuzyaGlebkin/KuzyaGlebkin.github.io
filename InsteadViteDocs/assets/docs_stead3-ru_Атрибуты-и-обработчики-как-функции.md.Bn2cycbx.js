import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.BDwTZuFy.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Атрибуты-и-обработчики-как-функции.md","filePath":"docs/stead3-ru/Атрибуты-и-обработчики-как-функции.md"}'),p={name:"docs/stead3-ru/Атрибуты-и-обработчики-как-функции.md"};function l(h,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="атрибуты-и-обработчики-как-функции" tabindex="-1">Атрибуты и обработчики как функции <a class="header-anchor" href="#атрибуты-и-обработчики-как-функции" aria-label="Permalink to &quot;Атрибуты и обработчики как функции&quot;">​</a></h2><p>Большинство атрибутов и обработчиков могут быть <em>функциями</em>. Так, например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;яблоко&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Пример не очень удачен, так как проще было бы написать disp = &#39;яблоко&#39;, но показывает синтаксис записи функции.</p><p>Основная задача такой функции -- это возврат строки или булевого значения. Сейчас мы рассматриваем возврат строки. Для возврата строки вы можете использовать явную запись в виде:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;яблоко&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>При этом ход выполнения кода функции прекращается, и она возвращает движку строку. В данном случае &quot;яблоко&quot;.</p><p>Более привычным способом вывода являются функции:</p><ul><li>p (&quot;текст&quot;) -- вывод текста и пробела;</li><li>pn (&quot;текст&quot;) -- вывод текста с переводом строки;</li><li>pr (&quot;текст&quot;) -- вывод текста &quot;как есть&quot;.</li></ul><blockquote><p>Если &#39;&#39;p&#39;&#39;/&#39;&#39;pn&#39;&#39;/&#39;&#39;pr&#39;&#39; вызывается с одним текстовым параметром, то скобки можно опускать.</p></blockquote><pre><code>pn &quot;Нет скобкам!&quot;
</code></pre><p>Все эти функции дописывают текст в буфер и при возврате из функции возвращают его движку. Таким образом, вы можете постепенно формировать вывод за счёт последовательного выполнения p/pn/pr. Имейте в виду, что автору крайне редко необходимо явно форматировать текст, особенно, если это описание объектов, движок сам расставляет необходимые переводы строк и пробелы для разделения информации разного рода и делает это унифицированным способом.</p><p>Вы можете использовать &#39;..&#39; или &#39;,&#39; для склейки строк. Тогда &#39;(&#39; и &#39;)&#39; обязательны. Например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Строка 1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; Строка 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Строка 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Строка 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p>Основное отличие атрибутов от обработчиков событий состоит в том, что обработчики событий могут менять состояние игрового мира, а атрибуты нет. Поэтому, если вы оформляете атрибут (например, &#39;dsc&#39;) в виде функции, помните, что задача атрибута -- это возврат значения, а не изменение состояния игры! Дело в том, что движок обращается к атрибутам в те моменты времени, которые обычно чётко не определены, и не связаны явно с какими-то игровыми процессами!</p></blockquote><p><strong>Важно!</strong></p><blockquote><p>Ещё одной особенностью обработчиков является тот факт, что вы не должны ждать каких-то событий внутри обработчика. То есть, не должно быть каких-то циклов ожидания, или организации задержек (пауз). Дело в том, что задача обработчика -- изменить игровое состояние и отдать управление INSTEAD, который визуализирует эти изменения и снова перейдёт в ожидание действий пользователя. Если вам требуется организовать задержки вывода, вам придётся воспользоваться модулем &quot;timer&quot;.</p></blockquote><p>Функции практически всегда содержат условия и работу с переменными. Например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	nam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;яблоко&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	seen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	dsc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;На столе {что-то} лежит.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;На столе лежит {яблоко}.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	act</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Это яблоко!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Гм... Это же яблоко!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>Если атрибут или обработчик оформлен как функция, то всегда <em>первый аргумент</em> функции (s) -- сам объект. То-есть, в данном примере, &#39;s&#39; это синоним _&#39;яблоко&#39;. Когда вы работаете с самим объектом в функции, удобнее использовать параметр, а не явное обращение к объекту по имени, так как при переименовании объекта вам не придётся переписывать вашу игру. Да и запись будет короче.</p><p>В данном примере при показе сцены в динамической части сцены будет выведен текст: &#39;На столе что-то лежит&#39;. При взаимодействии с &#39;что-то&#39;, переменная &#39;seen&#39; объекта &#39;яблоко&#39; будет установлена в true -- истина, и мы увидим, что это было яблоко.</p><p>Как видим, синтаксис оператора &#39;if&#39; довольно очевиден. Для наглядности, несколько примеров.</p><pre><code>if &lt;выражение&gt; then &lt;действия&gt; end

if have &#39;яблоко&#39; then
	p &#39;У меня есть яблоко!&#39;
end

if &lt;выражение&gt; then &lt;действия&gt; else &lt;действия иначе&gt; end

if have &#39;яблоко&#39; then
	p &#39;У меня есть яблоко!&#39;
else
	p &#39;У меня нет яблока!&#39;
end

if &lt;выражение&gt; then &lt;действия&gt; elseif &lt;выражение 2&gt; then &lt;действия 2&gt; else &lt;иначе&gt; end -- и т.д.

if have &#39;яблоко&#39; then
	p &#39;У меня есть яблоко!&#39;
elseif have &#39;вилка&#39; then
	p &#39;У меня нет яблока, но есть вилка!&#39;
else
	p &#39;У меня нет ни яблока, ни вилки!&#39;
end
</code></pre><p>Выражение в операторе if может содержать логическое &quot;и&quot; (and), &quot;или&quot; (or), &quot;отрицание&quot; (not) и скобки ( ) для задания приоритетов. Запись вида if &lt;переменная&gt; then означает, что переменная не равна false. Равенство описывается как &#39;==&#39;, неравенство &#39;~=&#39;.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;яблоко&#39; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;вилка&#39; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;У меня нет ни яблока, ни вилки!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apple </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Это не яблоко.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10 й ход настал!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Важно!</strong></p><p>В ситуации, когда переменная не была определена, но используется в условии, INSTEAD даст ошибку. Вам придётся заранее определять переменные, которые вы используете.</p>`,27)]))}const F=i(p,[["render",l]]);export{E as __pageData,F as default};
