import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Специальные-объекты/Подстановки.md","filePath":"docs/stead3-ru/Специальные-объекты/Подстановки.md"}'),l={name:"docs/stead3-ru/Специальные-объекты/Подстановки.md"};function p(n,s,h,d,k,o){return t(),i("div",null,s[0]||(s[0]=[e('<h3 id="подстановки" tabindex="-1">Подстановки <a class="header-anchor" href="#подстановки" aria-label="Permalink to &quot;Подстановки&quot;">​</a></h3><p>Объекты, чьё имя начинается на символ &#39;$&#39; тоже считаются системными объектами, но работают они по-другому.</p><p>Если в выводе текста встречается &quot;ссылка&quot; вида:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{$my a b c|текст}</span></span></code></pre></div><p>То происходит следующее:</p><ol><li>Берётся объект $my;</li><li>Берётся act объекта $my;</li><li>Вызывается act: _&#39;$my&#39;:(a, b, c, текст);</li><li>Возвращаемая строка заменяет собой всю конструкцию {...}.</li></ol><p>Таким образом, объекты играют роль подстановки.</p><p>Зачем это нужно? Представьте себе, что вы разработали модуль, который превращает записи формул из текстового вида в графические. Вы пишете объект $math который в своём act методе превращает текст в графическое изображение (спрайт) и возвращает его в текстовый поток. Тогда пользоваться таким модулем крайне просто, например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{$math|(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>',9)]))}const _=a(l,[["render",p]]);export{c as __pageData,_ as default};
