import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.BDwTZuFy.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Функции-которые-возвращают-объекты.md","filePath":"docs/stead3-ru/Функции-которые-возвращают-объекты.md"}'),t={name:"docs/stead3-ru/Функции-которые-возвращают-объекты.md"};function p(h,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="функции-которые-возвращают-объекты" tabindex="-1">Функции, которые возвращают объекты <a class="header-anchor" href="#функции-которые-возвращают-объекты" aria-label="Permalink to &quot;Функции, которые возвращают объекты&quot;">​</a></h2><p>В INSTEAD определены некоторые функции, которые возвращают различные объекты. При описании функции используются следующие соглашения о параметрах.</p><ul><li>в символах [ ] описаны необязательные параметры;</li><li>&#39;что&#39; или &#39;где&#39; - означает объект (в том числе комнату), заданный тегом, именем или переменной-ссылкой;</li></ul><p>Итак, основные функции:</p><ul><li>&#39;_(что)&#39; - получить объект;</li><li>&#39;me()&#39; возвращает текущего объекта-игрока;</li><li>&#39;here()&#39; возвращает текущую сцену;</li><li>&#39;where(что)&#39; возвращает комнату или объект, в котором находится заданный объект. Если объект находится в нескольких местах, то можно передать второй параметр -- таблицу Lua, в которую будут добавлены эти объекты;</li><li>&#39;inroom(что)&#39; аналогично where(), но вернёт комнату, в которой расположен объект (это важно для объектов в объектах);</li><li>&#39;from([где])&#39; возвращает прошлую комнату, из которой игрок перешёл в заданную комнату. Необязательный параметр -- получить прошлую комнату не для текущей комнаты, а для заданной;</li><li>&#39;seen(что, [где])&#39; возвращает объект или переход, если он присутствует и видим, есть второй необязательный параметр -- выбрать сцену или объект/список в котором искать;</li><li>&#39;lookup(что, [где])&#39; возвращает объект или переход, если он существует в сцене или объекте/списке;</li><li>&#39;inspect(что)&#39; возвращает объект, если он виден/доступен на сцене. Поиск производится по переходам и объектам, в том числе, в объектах игрока;</li><li>&#39;have(что)&#39; возвращает объект, если он есть в инвентаре и не отключён;</li><li>&#39;live(что)&#39; возвращает объект, если он присутствует среди живых объектов (описано далее);</li></ul><p>Эти функции в основном используются в условиях, либо для поиска объекта с последующей модификацией. Например, вы можете использовать &#39;seen&#39; для написания условия:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onexit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> seen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;монстр&#39; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- если у функции 1 параметр,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		--- скобки писать не обязательно</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Монстр загораживает проход!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>А также, для нахождения объекта в сцене:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, w)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;окно&#39; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ww </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lookup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;собака&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ww </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [[А где моя собака?]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		place</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ww, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;улица&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Я разбил окно! Моя собака выпрыгнула на улицу.&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Пример с функцией &#39;have&#39;:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">act</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> have</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;нож&#39; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Но у меня же есть нож!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	take</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;нож&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><blockquote><p>Может возникнуть вопрос, в чём разница между функциями lookup и _ ()? Дело в том, что lookup() ищет объект, и в случае, если объект не найден -- просто ничего не вернёт. А запись _ () предполагает, что вы точно знаете, что за предмет вы получаете. Другими словами, _ () это безусловное получение объекта по имени. Эта функция в общем случае не занимается <em>поиском</em>. Только если в качестве параметра задан тег, будет осуществлён поиск среди доступных объектов. Если вы используете _ () на несуществующий объект или недоступный тег -- вы получите ошибку!</p></blockquote>`,12)]))}const c=i(t,[["render",p]]);export{g as __pageData,c as default};
