import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Общие-сведения/Основы-отладки.md","filePath":"docs/stead3-ru/Общие-сведения/Основы-отладки.md"}'),n={name:"docs/stead3-ru/Общие-сведения/Основы-отладки.md"};function p(l,s,h,d,r,k){return t(),i("div",null,s[0]||(s[0]=[e(`<h3 id="основы-отладки" tabindex="-1">Основы отладки <a class="header-anchor" href="#основы-отладки" aria-label="Permalink to &quot;Основы отладки&quot;">​</a></h3><p>Во время отладки (проверки работоспособности вашей игры) удобно, чтобы INSTEAD был запущен с параметром -debug, тогда в случае ошибок будет показана более подробная информация о проблеме в виде стека вызовов. Параметр -debug можно задать в ярлыке (если вы работаете в Windows), а для других систем, я думаю вы и так знаете как передавать параметры командной строки.</p><p>Кроме того, в режиме -debug автоматически подключается отладчик. Вы можете активировать его с помощью клавиш ctrl-d или f7. Вы можете подключить отладчик и явно указав:</p><pre><code>require &quot;dbg&quot;
</code></pre><p>В коде вашей игры.</p><p>При отладке игры обычно нужно часто сохранять игру и загружать состояние игры. Вы можете использовать стандартный механизм сохранений через меню (или по клавишам f2/f3), или воспользоваться быстрым сохранением/загрузкой (клавиши f8/f9).</p><p>В режиме &#39;-debug&#39; вы можете перезапускать игру клавишами &#39;alt-r&#39;. В комбинации с f8/f9 это даёт возможность быстро посмотреть изменения в игре после её правки.</p><blockquote><p>Внимание! Если вы просто перезапустите INSTEAD, то скорее всего увидите старое состояние игры, так как по умолчанию работает режим автозагрузки автосохранения! Либо отключите эту настройку в меню (автосохранение), либо явно перезапускайте игру после правок. Перезапуск возможен через меню (начать заново) или &#39;alt-r&#39; в режиме &#39;-debug&#39; как это описано выше.</p></blockquote><p>В режиме &#39;-debug&#39; Windows-версия INSTEAD создаёт консольное окно (в Unix версии, если вы запускаете INSTEAD из консоли, вывод будет направлен в неё) в которое будет осуществляться вывод ошибок. Кроме того, используя функцию &#39;print()&#39;, вы сможете порождать свои сообщения с отладочным выводом. Например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">act</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Act is here! &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Не пугайтесь, когда вы прочитаете всё руководство и начнёте писать свою игру, вы, скорее всего, взглянете на этот пример с большим воодушевлением.</p><p>Вы также можете использовать функцию dprint(), которая посылает вывод в окно отладчика, и вы сможете посмотреть его при входе в режим отладки.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">act</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	dprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Act is here! &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Во время отладки бывает удобно изучать файлы сохранений, которые содержат состояние переменных игры. Чтобы не искать каждый раз файлы сохранений, создайте каталог saves в директории с вашей игрой (в том каталоге, где содержится main3.lua) и игра будет сохраняться в saves. Этот механизм также будет удобен для переноса игры на другие компьютеры.</p><p>Возможно (особенно, если вы пользуетесь Unix системами) вам понравится идея проверки синтаксиса ваших скриптов через запуск компилятора &#39;&#39;luac&#39;&#39;. В Windows это тоже возможно, нужно только установить выполняемые файлы lua для Windows (<a href="http://luabinaries.sourceforge.net" target="_blank" rel="noreferrer">http://luabinaries.sourceforge.net</a>)/ и воспользоваться luac52.exe.</p><p>Вы можете проверить синтаксис и с помощью INSTEAD, для этого воспользуйтесь параметром -luac:</p><pre><code>sdl-instead -debug -luac &lt;пусть к скрипту.lua&gt;
</code></pre>`,17)]))}const u=a(n,[["render",p]]);export{c as __pageData,u as default};
