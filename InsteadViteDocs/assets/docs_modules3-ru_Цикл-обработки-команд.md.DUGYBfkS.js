import{_ as l,c as a,o as e,ag as i}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/modules3-ru/Цикл-обработки-команд.md","filePath":"docs/modules3-ru/Цикл-обработки-команд.md"}'),_={name:"docs/modules3-ru/Цикл-обработки-команд.md"};function o(d,t,s,c,p,r){return e(),a("div",null,t[0]||(t[0]=[i('<h2 id="цикл-обработки-команд" tabindex="-1">Цикл обработки команд <a class="header-anchor" href="#цикл-обработки-команд" aria-label="Permalink to &quot;Цикл обработки команд&quot;">​</a></h2><p>Жизненный цикл игры на INSTEAD это обработка команд. Примерно как сервер отвечает на запросы клиентов, INSTEAD получает команды и отвечает на них текстом. Команды формируются интерпретатором в зависимости от того, какие действия выполняет игрок. Команда -- это слово, за которым может быть список аргументов.</p><p>Примеры команд STEAD3:</p><ul><li>load &lt;файл&gt;; - загрузка</li><li>save &lt;файл&gt;; - выгрузка</li><li>use &lt;объект&gt;,&lt;объект&gt;; - использование объекта на объект</li><li>use &lt;объект&gt;; - использование объекта в инвентаре</li><li>act &lt;объект&gt;; - действие на объект</li><li>act &lt;$объект&gt;,аргументы...; - ссылка на системный объект</li><li>go &lt;переход&gt;; - переход</li><li>look; - осмотреться</li><li>inv; - получить инвентарь</li><li>way; - получить список переходов</li></ul><p>В качестве объектов используются идентификаторы в виде цифр, которые движок сам сопоставляет каждому видимому на сцене объекту.</p><p>Каким образом STEAD3 обрабатывает команды?</p><p>Интерпретатор работает с Lua частью через специальный системный объект iface (переменная ссылка на &quot;@iface&quot;).</p><p>Этот объект создаётся внутри STEAD3, а для графической версии интерпретатора INSTEAD, пересоздаётся специальным модулем ext/gui.lua. Выполнение команды -- это вызов iface:cmd(команда). Обратите внимание на &#39;:&#39;. Такая запись это синоним: iface.cmd(iface, команда).</p><p>Команда разбивается на части, и записывается в специальный массив std.cmd. Так, в случае команды load, в std.cmd[1] будет записано &quot;load&quot;, а в std.cmd[2] -- путь к файлу.</p><p>Затем происходит вызов game:cmd(std.cmd). Это и есть то место, где команда обрабатывается игрой.</p><p>После чего вывод (возвращаемое значение) пропускается через iface:fmt(). Который в свою очередь вызывает std.fmt.</p><p>В std.fmt ссылки в выводе игры {} превращаются в ссылки для интерпретатора.</p>',12)]))}const n=l(_,[["render",o]]);export{u as __pageData,n as default};
