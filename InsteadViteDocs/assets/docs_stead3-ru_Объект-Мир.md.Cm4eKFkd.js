import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.BDwTZuFy.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Объект-Мир.md","filePath":"docs/stead3-ru/Объект-Мир.md"}'),n={name:"docs/stead3-ru/Объект-Мир.md"};function p(l,s,h,k,r,d){return t(),i("div",null,s[0]||(s[0]=[e(`<h2 id="объект-мир" tabindex="-1">Объект &quot;Мир&quot; <a class="header-anchor" href="#объект-мир" aria-label="Permalink to &quot;Объект &quot;Мир&quot;&quot;">​</a></h2><p>Игровой мир представлен объектом типа world. Имя такого объекта &#39;game&#39;. Существует ссылка-переменная, которая также называется game.</p><p>Обычно вы не работаете с этим объектом напрямую, однако иногда вы можете вызывать его методы, или менять значения переменных этого объекта.</p><p>Например, переменная game.codepage содержит кодировку исходного кода игры, и по умолчанию равна &quot;UTF-8&quot;. Я не рекомендую использовать другие кодировки, но иногда, выбор кодировки может стать необходимостью.</p><p>Переменная game.player -- содержит текущего игрока.</p><p>Кроме того, как вы уже знаете, объект &#39;game&#39; может содержать обработчики по умолчанию: &#39;act&#39;, &#39;inv&#39;, &#39;use&#39;, &#39;tak&#39;, которые будут вызваны, если в результате действий пользователя не будут найдены никакие другие обработчики (или все они вернули false). Например, вы можете написать в начале игры:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">act</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Не получается.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Гм... Странная штука...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Не сработает...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">game.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tak</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Не нужно мне это...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Конечно, все они могут быть функциями.</p><p>Также, объект game может содержать обработчики: onact, ontak, onuse, oninv, onwalk -- которые могут прерывать действия, в случае возврата false.</p><p>Ещё у объекта game можно задать обработчики: afteract, afterinv, afteruse, afterwalk -- которые вызываются в случае успешного выполнения соответствующего действия.</p>`,10)]))}const E=a(n,[["render",p]]);export{g as __pageData,E as default};
