import{_ as t,c as a,o as r,ag as p}from"./chunks/framework.BDwTZuFy.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Общие-сведения/История-создания.md","filePath":"docs/stead3-ru/Общие-сведения/История-создания.md"}'),o={name:"docs/stead3-ru/Общие-сведения/История-создания.md"};function _(s,e,n,d,i,c){return r(),a("div",null,e[0]||(e[0]=[p(`<h3 id="история-создания" tabindex="-1">История создания <a class="header-anchor" href="#история-создания" aria-label="Permalink to &quot;История создания&quot;">​</a></h3><p>Когда мы говорим &quot;текстовое приключение&quot; у большинства людей возникает один из двух привычных образов. Это либо текст с кнопками действий, например:</p><pre><code>Вы видите перед собой стол. На столе лежит яблоко. Что делать?

1) Взять яблоко
2) Отойти от стола
</code></pre><p>Или, гораздо реже, это классические игры с текстовым вводом, где для управления игрой необходимо было вводить действия с клавиатуры.</p><pre><code>Вы на кухне. Тут есть стол.
&gt; осмотреть стол.
На столе есть яблоко.
</code></pre><p>У обоих подходов есть свои преимущества и недостатки.</p><p>Если говорить про первый подход, то он близок к жанру книг-игр и удобен больше для литературных текстов, которые описывают <em>события</em>, происходящие с главным героем, и не очень удобен для создания классических квестов, где главный герой исследует <em>смоделированный</em> в игре <em>мир</em>, свободно перемещаясь по нему и взаимодействуя с объектами этого мира.</p><p>Второй подход моделирует мир, но требует значительных усилий от автора игры, и, что более важно, более подготовленного игрока. Особенно, когда мы имеем дело с русским языком.</p><p>Проект INSTEAD был создан для написания другого типа игр, которые совмещают преимущества обоих подходов, одновременно пытаясь избежать их недостатков.</p><p>Мир игры на INSTEAD моделируется как при втором подходе, то есть в игре есть места (сцены или комнаты) которые может посещать главный герой и объекты, с которыми он взаимодействует (включая живых персонажей). Игрок свободно изучает мир и манипулирует объектами. Причём, действия с объектами не прописаны в виде явных пунктов меню, а скорее напоминают классические графические квесты в стиле 90-х.</p><p>На самом деле, в INSTEAD есть множество незаметных на первый взгляд вещей, которые направлены на развитие выбранного подхода, и который делает процесс игры максимально динамичным и непохожим на привычные &quot;текстовые квесты&quot;. Это подтверждается в том числе и тем, что на движке было выпущено множество замечательных игр, интерес к которым проявляют не только любители текстовых игр как таковых, но и люди не знакомые с данным жанром.</p><p>Перед изучением данного руководства, я рекомендую поиграть в классические игры INSTEAD, чтобы понять, о чём идёт речь. С другой стороны, раз вы здесь, то, наверное, вы уже сделали это.</p><p>Правда, не стоит пока изучать код этих игр, так как старые игры очень часто написаны неоптимально, с использованием устаревших конструкций. Текущая версия INSTEAD позволяет реализовывать код лаконичнее, проще и понятнее. Об этом и рассказывается в данном документе.</p><p>Если вас интересует история создания движка, то вы можете прочитать статью о том, как всё начиналось: <a href="https://instead-hub.github.io/article/2010-05-09-history/" target="_blank" rel="noreferrer">https://instead-hub.github.io/article/2010-05-09-history/</a></p>`,14)]))}const h=t(o,[["render",_]]);export{l as __pageData,h as default};
