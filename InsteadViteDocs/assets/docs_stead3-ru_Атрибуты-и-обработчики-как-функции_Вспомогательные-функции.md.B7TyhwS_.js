import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.BDwTZuFy.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/stead3-ru/Атрибуты-и-обработчики-как-функции/Вспомогательные-функции.md","filePath":"docs/stead3-ru/Атрибуты-и-обработчики-как-функции/Вспомогательные-функции.md"}'),p={name:"docs/stead3-ru/Атрибуты-и-обработчики-как-функции/Вспомогательные-функции.md"};function l(h,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h3 id="вспомогательные-функции" tabindex="-1">Вспомогательные функции <a class="header-anchor" href="#вспомогательные-функции" aria-label="Permalink to &quot;Вспомогательные функции&quot;">​</a></h3><p>Вы можете писать свои вспомогательные функции и использовать их из своей игры, например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, ...)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- временный массив с аргументами к функции</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a[n]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- выведем n-й элемент массива</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dsc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	mprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;{Котёнок} мурлычет.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;{Котёнок} играет.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;{Котёнок} облизывается.&quot; </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Пока не обращайте внимания на данный пример, если он кажется вам сложным.</p>`,4)]))}const o=i(p,[["render",l]]);export{_ as __pageData,o as default};
