import{_ as t,c as a,o,ag as r}from"./chunks/framework.BDwTZuFy.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/modules3-ru/Модули-STEAD3.md","filePath":"docs/modules3-ru/Модули-STEAD3.md"}'),s={name:"docs/modules3-ru/Модули-STEAD3.md"};function d(l,e,_,i,c,n){return o(),a("div",null,e[0]||(e[0]=[r(`<h2 id="модули-stead3" tabindex="-1">Модули STEAD3 <a class="header-anchor" href="#модули-stead3" aria-label="Permalink to &quot;Модули STEAD3&quot;">​</a></h2><p>Данное руководство описывает основы разработки модулей STEAD3. Поэтому в дальнейшем изложении слово &quot;модуль&quot; означает именно модуль, написанный в рамках STEAD3.</p><p>Что такое модуль? Часто ошибочно считают, что модуль -- это любой отдельный файл игры, содержащий служебные функции, структуры и объекты. На самом деле это не так. Если вам необходимо выделить служебный код в отдельные игровые файлы так, чтобы он выполнялся в момент старта игры -- вам достаточно включить такой файл инструкцией include:</p><pre><code>include &quot;mylib&quot;
</code></pre><p>Модули stead3 пишутся, следуя специальным соглашениям, при нарушении которых вы получите нерабочую игру. Данные соглашения и описываются в этом руководстве. Очень часто в оформлении своего кода в виде модуля просто нет никакой необходимости. Написание модуля целесообразно в тех случаях, когда требуемая функциональность может быть реализована за счёт тесного взаимодействия с движком STEAD3 и представляет ценность не только в рамках вашей игры. Примерами модулей могут быть:</p><ul><li>модуль форматирования вывода;</li><li>модуль нестандартного управления игрой;</li><li>модуль генерации изображений нотного стана...</li></ul><p>И так далее.</p>`,7)]))}const T=t(s,[["render",d]]);export{u as __pageData,T as default};
